security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    
    role_hierarchy:
        ROLE_ADMIN:                  [ROLE_RH, ROLE_RESPONSABLE_DIVISION, ROLE_RESPONSABLE_SERVICE, ROLE_GESTIONNAIRE_SERVICE]
        ROLE_RH:                     [ROLE_RESPONSABLE_DIVISION, ROLE_RESPONSABLE_SERVICE]
        ROLE_RESPONSABLE_DIVISION:   [ROLE_RESPONSABLE_SERVICE]
        ROLE_RESPONSABLE_SERVICE:    [ROLE_GESTIONNAIRE_SERVICE]
        ROLE_GESTIONNAIRE_SERVICE:   [ROLE_COLLABORATEUR]
        ROLE_COLLABORATEUR:          []

    access_control:
    # Import CSV & admin des utilisateurs
    - { path: ^/admin,                     roles: ROLE_ADMIN }

    # Gestion des périodes
    - { path: ^/periode-paie,             roles: [ROLE_RH, ROLE_ADMIN] }

    # Saisie des éléments variables
    - { path: ^/elements-variable/new,    roles: ROLE_GESTIONNAIRE_SERVICE }
    - { path: ^/elements-variable,        roles: ROLE_GESTIONNAIRE_SERVICE }

    # Validation service
    - { path: ^/validation-service,       roles: ROLE_RESPONSABLE_SERVICE }

    # Validation division
    - { path: ^/validation-division,      roles: ROLE_RESPONSABLE_DIVISION }

    # Consultation des primes de performance (via EasyAdmin)
    - { path: ^/admin/prime_performance,  roles: ROLE_COLLABORATEUR }

    # Make sure login page is accessible
    - { path: ^/login,                    roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon